generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                              String    @id
  name                            String?
  episodes                        Episode[]
  Follow_Follow_followed_idToUser Follow[]  @relation("Follow_followed_idToUser")
  Follow_Follow_follower_idToUser Follow[]  @relation("Follow_follower_idToUser")
  likes                           Like[]
}

model Episode {
  id         String   @id @default(uuid())
  content    String   @db.VarChar(200)
  created_at DateTime @default(now())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes      Like[]

  @@index([created_at])
}

model Like {
  created_at DateTime @default(now())
  user_id    String
  episode_id String
  episode    Episode  @relation(fields: [episode_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, episode_id])
  @@index([created_at, episode_id])
}

model Follow {
  id                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                   String    @default(dbgenerated("gen_random_uuid()"))
  followed_id                   String?   @default(dbgenerated("gen_random_uuid()"))
  created_at                    DateTime? @default(now()) @db.Timestamp(6)
  User_Follow_followed_idToUser User?     @relation("Follow_followed_idToUser", fields: [followed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_followed")
  User_Follow_follower_idToUser User      @relation("Follow_follower_idToUser", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_follower")
}
